"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberPrompt = void 0;
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const Globalize = require("globalize");
const Recognizers = require("@microsoft/recognizers-text-number");
const locales = require("../i18n");
const botbuilder_core_1 = require("botbuilder-core");
const prompt_1 = require("./prompt");
// Load all registered locales into Globalize library
Object.values(locales).forEach((locale) => Globalize.load(locale));
/**
 * Prompts a user to enter a number.
 *
 * @remarks
 * By default the prompt will return to the calling dialog a `number` representing the users input.
 */
class NumberPrompt extends prompt_1.Prompt {
    /**
     * Creates a new NumberPrompt instance.
     *
     * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
     * @param validator (Optional) validator that will be called each time the user responds to the prompt.
     * @param defaultLocale (Optional) locale to use if `TurnContext.activity.locale` is not specified. Defaults to a value of `en-us`.
     */
    constructor(dialogId, validator, defaultLocale) {
        super(dialogId, validator);
        this.defaultLocale = defaultLocale;
    }
    /**
     * Prompts the user for input.
     *
     * @param context [TurnContext](xref:botbuilder-core.TurnContext), context for the current
     * turn of conversation with the user.
     * @param state Contains state for the current instance of the prompt on the dialog stack.
     * @param options A [PromptOptions](xref:botbuilder-dialogs.PromptOptions) object constructed
     * from the options initially provided in the call to Prompt.
     * @param isRetry `true` if this is the first time this prompt dialog instance
     * on the stack is prompting the user for input; otherwise, false.
     * @returns A `Promise` representing the asynchronous operation.
     */
    onPrompt(context, state, options, isRetry) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isRetry && options.retryPrompt) {
                yield context.sendActivity(options.retryPrompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
            }
            else if (options.prompt) {
                yield context.sendActivity(options.prompt, undefined, botbuilder_core_1.InputHints.ExpectingInput);
            }
        });
    }
    /**
     * Attempts to recognize the user's input.
     *
     * @param context [TurnContext](xref:botbuilder-core.TurnContext), context for the current
     * turn of conversation with the user.
     * @param _state Contains state for the current instance of the prompt on the dialog stack.
     * @param _options A [PromptOptions](xref:botbuilder-dialogs.PromptOptions) object constructed
     * from the options initially provided in the call to Prompt.
     * @returns A `Promise` representing the asynchronous operation.
     */
    onRecognize(context, _state, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = { succeeded: false };
            const activity = context.activity;
            const utterance = activity.text;
            if (!utterance) {
                return result;
            }
            const defaultLocale = this.defaultLocale || 'en-us';
            const locale = activity.locale || defaultLocale;
            const [{ resolution = null } = {}] = Recognizers.recognizeNumber(utterance, locale) || [];
            if (resolution) {
                result.succeeded = true;
                // Note: if we encounter an exception loading a globalize number parser, fall back to the
                // parser for the default locale
                const parser = Globalize(this.getCultureFormattedForGlobalize(locale));
                let numberParser;
                try {
                    numberParser = parser.numberParser();
                }
                catch (_a) {
                    numberParser = Globalize(this.getCultureFormattedForGlobalize(defaultLocale)).numberParser();
                }
                result.value = numberParser(resolution.value);
            }
            return result;
        });
    }
    /**
     * @private
     * The portions of the Globalize parsing library we use only need the first letters for internationalization culture
     */
    getCultureFormattedForGlobalize(culture) {
        return culture.slice(0, 2).toLowerCase();
    }
}
exports.NumberPrompt = NumberPrompt;
//# sourceMappingURL=numberPrompt.js.map