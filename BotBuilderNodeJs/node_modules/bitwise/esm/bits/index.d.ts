import and from './and';
import nand from './nand';
import nor from './nor';
import not from './not';
import or from './or';
import reduceAnd from './reduce-and';
import reduceNand from './reduce-nand';
import reduceNor from './reduce-nor';
import reduceOr from './reduce-or';
import reduceXnor from './reduce-xnor';
import reduceXor from './reduce-xor';
import toBoolean from './to-boolean';
import toString from './to-string';
import xnor from './xnor';
import xor from './xor';
export { and, nand, nor, not, or, reduceAnd, reduceNand, reduceNor, reduceOr, reduceXnor, reduceXor, toBoolean, toString, xnor, xor, };
declare const _default: {
    and: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
    nand: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
    nor: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
    not: (bits: import("../types").Bit[]) => import("../types").Bit[];
    or: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
    reduceAnd: (bits: import("../types").Bit[]) => import("../types").Bit;
    reduceNand: (bits: import("../types").Bit[]) => import("../types").Bit;
    reduceNor: (bits: import("../types").Bit[]) => import("../types").Bit;
    reduceOr: (bits: import("../types").Bit[]) => import("../types").Bit;
    reduceXnor: (bits: import("../types").Bit[]) => import("../types").Bit;
    reduceXor: (bits: import("../types").Bit[]) => import("../types").Bit;
    toBoolean: (bits: import("../types").Bit[]) => boolean[];
    toString: (bits: import("../types").Bit[], spacing?: number, spacer?: string) => string;
    xnor: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
    xor: (bits1: import("../types").Bit[], bits2: import("../types").Bit[]) => import("../types").Bit[];
};
export default _default;
