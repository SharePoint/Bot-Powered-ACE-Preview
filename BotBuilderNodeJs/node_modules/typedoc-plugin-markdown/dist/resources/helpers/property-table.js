"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.propertyTable = void 0;
const models_1 = require("typedoc/dist/lib/models");
const comment_1 = require("./comment");
const escape_1 = require("./escape");
const strip_line_breaks_1 = require("./strip-line-breaks");
const type_1 = require("./type");
function propertyTable(kind) {
    const commentsMap = this.map((param) => (param.comment && !!param.comment.text) ||
        (param.comment && !!param.comment.shortText));
    const hasComments = !commentsMap.every((value) => !value);
    const hasValues = kind === models_1.ReflectionKind.ObjectLiteral;
    const headers = ['Name', 'Type'];
    if (hasValues) {
        headers.push('Value');
    }
    if (hasComments) {
        headers.push('Description');
    }
    const rows = this.map((property) => {
        const propertyType = property.signatures || property.children ? property : property.type;
        const row = [];
        const nameCol = [];
        const name = property.name.match(/[\\`\\|]/g) !== null
            ? escape_1.escape(getName(property))
            : `\`${getName(property)}\``;
        nameCol.push(name);
        row.push(nameCol.join(' '));
        row.push(type_1.type.call(propertyType, kind === models_1.ReflectionKind.ObjectLiteral));
        if (hasValues) {
            row.push(property.defaultValue
                ? escape_1.escape(strip_line_breaks_1.stripLineBreaks(property.defaultValue))
                : strip_line_breaks_1.stripLineBreaks(type_1.type.call(propertyType)));
        }
        if (hasComments) {
            if (property.comment) {
                row.push(strip_line_breaks_1.stripLineBreaks(comment_1.comment.call(property.comment)));
            }
            else {
                row.push('-');
            }
        }
        return `${row.join(' | ')} |\n`;
    });
    const output = `\n${headers.join(' | ')} |\n${headers
        .map(() => '------')
        .join(' | ')} |\n${rows.join('')}`;
    return output;
}
exports.propertyTable = propertyTable;
function getName(property) {
    const md = [];
    if (property.flags.isRest) {
        md.push('...');
    }
    md.push(property.name);
    if (property.flags.isOptional) {
        md.push('?');
    }
    return md.join('');
}
