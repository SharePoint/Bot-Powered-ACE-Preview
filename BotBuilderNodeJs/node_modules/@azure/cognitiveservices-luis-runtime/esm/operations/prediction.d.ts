import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { LUISRuntimeClientContext } from "../lUISRuntimeClientContext";
/** Class representing a Prediction. */
export declare class Prediction {
    private readonly client;
    /**
     * Create a Prediction.
     * @param {LUISRuntimeClientContext} client Reference to the service client.
     */
    constructor(client: LUISRuntimeClientContext);
    /**
     * Gets predictions for a given utterance, in the form of intents and entities. The current maximum
     * query size is 500 characters.
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param [options] The optional parameters
     * @returns Promise<Models.PredictionResolveResponse>
     */
    resolve(appId: string, query: string, options?: Models.PredictionResolveOptionalParams): Promise<Models.PredictionResolveResponse>;
    /**
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param callback The callback
     */
    resolve(appId: string, query: string, callback: msRest.ServiceCallback<Models.LuisResult>): void;
    /**
     * @param appId The LUIS application ID (Guid).
     * @param query The utterance to predict.
     * @param options The optional parameters
     * @param callback The callback
     */
    resolve(appId: string, query: string, options: Models.PredictionResolveOptionalParams, callback: msRest.ServiceCallback<Models.LuisResult>): void;
}
//# sourceMappingURL=prediction.d.ts.map