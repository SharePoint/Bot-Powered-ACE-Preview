/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/messageIdMappers";
import * as Parameters from "../models/parameters";
/** Class representing a MessageId. */
var MessageId = /** @class */ (function () {
    /**
     * Create a MessageId.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function MessageId(client) {
        this.client = client;
    }
    MessageId.prototype.update = function (popReceipt, visibilityTimeout, options, callback) {
        return this.client.sendOperationRequest({
            popReceipt: popReceipt,
            visibilityTimeout: visibilityTimeout,
            options: options
        }, updateOperationSpec, callback);
    };
    MessageId.prototype.deleteMethod = function (popReceipt, options, callback) {
        return this.client.sendOperationRequest({
            popReceipt: popReceipt,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    return MessageId;
}());
export { MessageId };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var updateOperationSpec = {
    httpMethod: "PUT",
    path: "{queueName}/messages/{messageid}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.popReceipt,
        Parameters.visibilityTimeout1,
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "queueMessage"
        ],
        mapper: Mappers.QueueMessage
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        204: {
            headersMapper: Mappers.MessageIdUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessageIdUpdateHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{queueName}/messages/{messageid}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.popReceipt,
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        204: {
            headersMapper: Mappers.MessageIdDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessageIdDeleteHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=messageId.js.map