/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/messagesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Messages. */
var Messages = /** @class */ (function () {
    /**
     * Create a Messages.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Messages(client) {
        this.client = client;
    }
    Messages.prototype.dequeue = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, dequeueOperationSpec, callback);
    };
    Messages.prototype.clear = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, clearOperationSpec, callback);
    };
    Messages.prototype.enqueue = function (queueMessage, options, callback) {
        return this.client.sendOperationRequest({
            queueMessage: queueMessage,
            options: options
        }, enqueueOperationSpec, callback);
    };
    Messages.prototype.peek = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, peekOperationSpec, callback);
    };
    return Messages;
}());
export { Messages };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var dequeueOperationSpec = {
    httpMethod: "GET",
    path: "{queueName}/messages",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.numberOfMessages,
        Parameters.visibilityTimeout0,
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "QueueMessage",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DequeuedMessageItem"
                        }
                    }
                }
            },
            headersMapper: Mappers.MessagesDequeueHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessagesDequeueHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var clearOperationSpec = {
    httpMethod: "DELETE",
    path: "{queueName}/messages",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        204: {
            headersMapper: Mappers.MessagesClearHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessagesClearHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var enqueueOperationSpec = {
    httpMethod: "POST",
    path: "{queueName}/messages",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.visibilityTimeout0,
        Parameters.messageTimeToLive,
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    requestBody: {
        parameterPath: "queueMessage",
        mapper: __assign(__assign({}, Mappers.QueueMessage), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        201: {
            bodyMapper: {
                xmlElementName: "QueueMessage",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnqueuedMessage"
                        }
                    }
                }
            },
            headersMapper: Mappers.MessagesEnqueueHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessagesEnqueueHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var peekOperationSpec = {
    httpMethod: "GET",
    path: "{queueName}/messages",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.numberOfMessages,
        Parameters.timeoutInSeconds,
        Parameters.peekonly
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "QueueMessage",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PeekedMessageItem"
                        }
                    }
                }
            },
            headersMapper: Mappers.MessagesPeekHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.MessagesPeekHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=messages.js.map