/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/queueMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Queue. */
var Queue = /** @class */ (function () {
    /**
     * Create a Queue.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Queue(client) {
        this.client = client;
    }
    Queue.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    Queue.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Queue.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Queue.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    Queue.prototype.getAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccessPolicyOperationSpec, callback);
    };
    Queue.prototype.setAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessPolicyOperationSpec, callback);
    };
    return Queue;
}());
export { Queue };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        201: {
            headersMapper: Mappers.QueueCreateHeaders
        },
        204: {
            headersMapper: Mappers.QueueCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueCreateHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        204: {
            headersMapper: Mappers.QueueDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueDeleteHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp3
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        200: {
            headersMapper: Mappers.QueueGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueGetPropertiesHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp3
    ],
    headerParameters: [
        Parameters.metadata,
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        204: {
            headersMapper: Mappers.QueueSetMetadataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueSetMetadataHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccessPolicyOperationSpec = {
    httpMethod: "GET",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp4
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "SignedIdentifier",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SignedIdentifier"
                        }
                    }
                }
            },
            headersMapper: Mappers.QueueGetAccessPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueGetAccessPolicyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
var setAccessPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "{queueName}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeoutInSeconds,
        Parameters.comp4
    ],
    headerParameters: [
        Parameters.version,
        Parameters.requestId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "queueAcl"
        ],
        mapper: {
            xmlName: "SignedIdentifiers",
            xmlElementName: "SignedIdentifier",
            serializedName: "queueAcl",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "SignedIdentifier"
                    }
                }
            }
        }
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        204: {
            headersMapper: Mappers.QueueSetAccessPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.QueueSetAccessPolicyHeaders
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=queue.js.map